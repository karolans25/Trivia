<strong>1. ¿Qué es JavaScript?</strong>
Opción 1
JavaScript es un lenguaje de programación que ha sido concebido para profesionales y todos los que se desenvuelven en el desarrollo de paginas web. Es un lenguaje que funciona del lado del cliente y servidor, por tanto, son los navegadores los que se ocupan de interpretar el lenguaje Javascript. Vale resaltar que JavaScript no es lo mismo que Java.
Opción 1
1
<strong>2. Enumera las diferencias entre Java y JavaScript</strong>
Las principales diferencias son: <br><ol><li><strong>JavaScript</strong> ha sido un lenguaje interpretado, y <strong>Java</strong> compilado. Los programas de <strong>JavaScript</strong> son archivos de texto que se integra directamente en las páginas HTML y es interpretado (sin estar compilado) por el cliente (navegador), mientras que en <strong>Java</strong> se compilan a un archivo especial para que ser optimizados a un lenguaje intermedio llamado bytecode, y leído posteriormente en un ordenador que lo ejecute.</li><li><strong>Java</strong> es un lenguaje de programación orientado a objetos puros (OOP), mientras que <strong>JavaScript</strong> está basado en prototipos y, puede emular la programación orientada a objetos.</li><li><strong>JavaScript</strong> es gestionado por ECMAScript, una organización sin ánimo de lucro. En <strong>Java</strong>, el control lo tiene Oracle, una empresa privada que lo gestiona en función de sus intereses.</li><li><strong>JavaScript</strong> se depura en una fase y Java en dos. JavaScript hace que el código trabaje informando de los errores que se producen a medida que se ejecutando. <strong>Java</strong>, primero hace la fase de compilación y el compilador nos indica los posibles errores de sintaxis presentes en nuestro código. Después, se ejecuta el programa, donde pueden surgir errores para ser depurados.</li><li><strong>Java</strong> tiene variables definidas que no se pueden cambiar y es más complejo, <strong>JavaScript</strong> puede ser cambiante, dándole flexibilidad y es más sencillo.</li><li>&nbsp;<strong>JavaScript</strong> es débilmente tipado, una misma variable puede contener primero un texto, luego un número, un array o un objeto. Esto, que parece una ventaja, también es fuente de posibles errores si no controlamos correctamente lo que ocurre en nuestro código. <strong>Java</strong> es fuertemente tipado, todas las variables tienen un tipo determinado y, una vez definidas, no se pueden cambiar.</li></ol>
Opción 1
Opción 1
0
<strong> 3. </strong><strong>¿Cuales son los tipos de datos JavaScript?</strong>
Opción 1
Opción 1
Los tipos de datos JavaScript son: String, booleano, Objeto, Número, Indefinido.
2
<strong>4. ¿Para qué sirve la función isNaN?</strong>
Opción 1
La función isNan devuelve verdadero si el argumento no es un número porque de lo contrario arrojaría un falso.
Opción 1
1
<strong>5. Entre JavaScript y un script ASP, ¿cual es más rápido?</strong>
JavaScript es más rápido porque es un lenguaje del lado del cliente y no necesita la ayuda del servidor web para ejecutarse. Por otra parte el ASP es un lenguaje del lado del servidor. Motivo por el que siempre es más lento que JavaScript. Sin embargo, Javascript ahora, también puede ser usado como un lenguaje de lado del servidor (server side) (nodejs).
Opción 1
Opción 1
0
<strong>6. ¿Qué es el infinito negativo?</strong>
Opción 1
Infinito Negativo es un número en JavaScript que puede ser derivado, al dividir el número negativo entre cero.
Opción 1
1
<strong> 7. ¿Es posible dividir el código JavaScript en varias líneas?</strong>
Opción 1
Opción 1
Si, haciendo una declaracion string con el uso de una barra invertida (slash), '\', al terminar la primera línea.
2
<strong> 8. ¿Qué empresa desarrolló JavaScript?</strong>
Opción 1
La compañía de software Netscape fue quien desarrolló el JavaScript.
Opción 1
1
<strong>9. ¿Qué son las variables no declaradas y no definidas?</strong>
<strong>Variables no declaradas</strong>: son las que no existen en un programa, y no se declaran. Si el programa trata de leer su valor entonces va a arrojar un error.<br><strong>Variables no definidas</strong>: son aquellas declaradas en el programa, pero no tienen asignado ningún valor. Si el programa quiere leer el valor de &nbsp;variable no definida, se devuelve un valor no definido.
Opción 1
Opción 1
0
<strong>10. Escriba un código para añadir nuevos elementos dinámicamente</strong>
&lt;html&gt;&lt;head&gt;&lt;title&gt; Añadiendo elementos de forma dinámica con nodos de texto &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div  id="nodo-texto"&gt;&lt;/div&gt; &lt;script type="application/javascript"&gt; var elemento = document.createElement("H1") // Creamos un elemento del tipo h1 var texto = document.createTextNode("Este es un texto creado a través de un nodo de texto"); // Creamos un texto con un nodo de texto elemento.appendChild(texto); // Agregamos el nodo de texto al elemento document.getElementById('nodo-texto').appendChild(elemento) // Para podemos mostrarlo en el DOM lo seleccionamos el div donde lo queremos introducir y le pasamos como hijo el h1 &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Opción 1
Opción 1
0
<strong>11. ¿Qué son las variables globales, cómo se declaran estas variables y cuáles son los problemas asociados con su uso?</strong>
Opción 1
Las variables globales son las que están a disposición para utilizar en todo el código, esto quiere decir, que no tienen alcance. La palabra clave (var) es utilizada para declarar una variable u objeto local. Si la palabra clave (var) es omitida, se declara como variable global.
Opción 1
1
<strong>12. ¿Qué es un cuadro de diálogo?</strong>
Opción 1
Opción 1
Es un cuadro que permite al usuario introducir datos, mediante un cuadro de texto. La etiqueta y el cuadro se suministrarán para que se pueda ingresar el texto o el número.
2
<strong> 13. ¿Qué significa la palabra clave 'this' en JavaScript?</strong>
La palabra clave 'this' se refiere al objeto desde donde fue llamado. 
Opción 1
Opción 1
0
<strong>14. Explique el funcionamiento de los temporizadores en JavaScript y las desventajas de usarlos, si las hay.</strong>
Opción 1
Los temporizadores se usan para ejecutar un fragmento de código en un momento determinado o para repetir el código en un espacio de tiempo señalado. Esto se hace utilizando las funciones setTimeout, setInterval y clearInterval,<br> La función <strong>setTimeout</strong> (function, delay), es una funcion que se usa para iniciar un temporizador que llama a una funcion luego del retardo especificado. La función <strong>setInterval</strong> (function, delay) es utilizada para ejecutar repetidamente una función el el retardo (delay) que se especifique y solo se detiene cuando se cancela. La función <strong>clearInterval</strong>(id) es la que señala&nbsp; al temporizador que se pare. <br>Los temporizadores funcionan dentro de un hilo único, debido a esto, &nbsp;los eventos pueden quedar 'en cola', a la espera de ser ejecutados. 
Opción 1
1
<strong> 15. ¿Qué símbolo se utiliza para los comentarios en Javascript?</strong>
Opción 1
Opción 1
Se usa (//) para comentarios de una sola línea<br>Para comentarios multi-linea se abre con (/*) y se cierra con (*/). 
2
<strong>16. ¿Cuál es la diferencia entre ViewState y SessionState?</strong>
ViewState es muy específico para la página de una sesión.<br>SessionState es específico para los datos del usuario, a los que se entra en las páginas de la aplicación web. 
Opción 1
Opción 1
0
<strong>17. ¿Qué es el operador ===?</strong>
El operador (===) es llamado operador de igualdad estricta, el cual arroja verdadero (true) cuando los dos operandos poseen el mismo valor sin ningún tipo de conversión.
Opción 1
Opción 1
0
<strong>18. Explique cómo se puede enviar un formulario usando JavaScript.</strong>
Opción 1
Si, se puede hacer usando: document.form[0].submit();
Opción 1
1
<strong>19. ¿JavaScript es compatible con la conversión de tipos automática (automatic type conversion)?</strong>
Sí, Javascript es compatible con los tipos de &nbsp;conversión automática. Es un tipo de conversión muy usada por los desarrolladores de JavaScript.
Opción 1
Opción 1
0
<strong> 20. ¿Cómo se puede cambiar el estilo/clase de un elemento?</strong>
Opción 1
De la siguiente forma: document.getElementById("myText").style.fontSize = "20?;<br> o de esta otra: document.getElementById("myText").className = "anyclass";
Opción 1
1
<strong>21. Explica cómo leer y escribir un archivo usando JavaScript.</strong>
Opción 1
Opción 1
Hay dos formas de leer y escribir un archivo usando JavaScript:<br>-Utilizando extensiones JavaScript.<br>-A través de una página web y objetos ActiveX.
2
<strong> 22. ¿Cuáles son todos los bucles en JavaScript?</strong>
Las estructuras de bucles en Javascript son: For, While, Do-While y forEach
Opción 1
Opción 1
0
<strong>23. ¿A qué se le llama tipificación de variables (variable typing) en Javascript?</strong>
Opción 1
La tipificación de variables se usa para asignar un número a una variable, y esta misma variable se puede asignar a un string. <strong>Ejemplo</strong>: i = 10; i = "cadena";
Opción 1
1
<strong>24. ¿Cómo se puede convertir un string de cualquier base a un entero en JavaScript?</strong>
Opción 1
Opción 1
A través del uso de la función parseInt(), ya que, esta función toma el string a convertir como primer parámetro, y como segundo parámetro usa la base del string dado. Para convertir 4F (de base 16) a entero, el código utilizado será: <br>parseInt ("4F", 16);
2
<strong>25. Explica la diferencia entre '==' y '===='</strong>
Opción 1
Opción 1
La diferencia es que ("==") chequea solamente la igualdad de valor, pero ("====") es la prueba de igualdad más estricta y además, devuelve falso si el tipo o el valor de las dos variables es distinto.
2
<strong>26. ¿Cuál sería el resultado de 3+2+''7''?</strong>
Dado que 3 y 2 son números enteros, se sumarán numéricamente. Y como el 7 es una cadena, se va a aplicar su concatenación, así que el resultado en este caso sería 57.
Opción 1
Opción 1
0
<strong>27. ¿Cómo se puede detectar el sistema operativo de la máquina del cliente?</strong>
Opción 1
Opción 1
Es necesario usar la cadena navigator.platform
2
<strong>28. ¿Qué significa NULL en Javascript?</strong>
El valor (NULL) es utilizado para representar a ningún valor o ningún objeto. Esto quiere decir, que no representa a ningún objeto o cadena,&nbsp; ni valor booleano, ni&nbsp; número u objeto de un array.
Opción 1
Opción 1
0
<strong>29. ¿Cuál es la función del operador delete?</strong>
Opción 1
La palabra clave (delete) es usada para eliminar la propiedad, así como su valor. 
Opción 1
1
<strong>30. ¿Qué es un valor no definido en JavaScript?</strong>
Opción 1
Opción 1
Un valor no definido significa que: <br>-La variable usada en el código no existe.<br> -La variable no está acreditada a ningún valor.<br>-La propiedad no existe. 
2
<strong>31. ¿Cuáles son todos los tipos de ventanas emergentes disponibles en JavaScript?</strong>
Alerta (alert), Confirmar (confirm) y Entrada por teclado(prompt). <br>alert<br>('Esto es una alerta')<br>confirm('Esto es una ventana de confirmación con un mensaje', true)<br>prompt('Esto es una entrada por teclado, introduce cualquier valor:  ')<br>
Opción 1
Opción 1
0
<strong>32. ¿Para qué se utiliza Void (0)?</strong>
Opción 1
Se usa Void(0) para prevenir que la página sea actualizada. También, se usa para llamar a otro método sin que se actualice la página.
Opción 1
1
<strong>33. </strong><strong>¿Cómo se puede forzar a una página a cargar otra página en JavaScript?</strong>
Opción 1
Se puede usar el siguiente código para lograr objetivo deseado.<br>&lt;script type="text/application/javascript" &gt; <br> document.location.href = 'https://www.google.co.ve/'; <br> &lt;/script&gt;
Opción 1
1
<strong>34. ¿Cuál es el tipo de datos de variables en JavaScript?</strong>
Todas las variables en JavaScript son del tipo objetos. 
Opción 1
Opción 1
0
<strong>35. ¿Cuál es la diferencia entre un cuadro de alerta y un cuadro de confirmación?</strong>
Opción 1
Opción 1
El cuadro de alerta sólo muestra un botón, el botón OK. El cuadro de confirmación presenta dos botones: el de OK y Cancelar. 
2
<strong>36. ¿Qué son los caracteres de escape?</strong>
Opción 1
Opción 1
Los caracteres de escape (barra invertida) son utilizados para trabajar con caracteres especiales, entre ellos; comillas dobles, comillas simples, símbolos y apóstrofes.<strong>Ejemplo:</strong><br>document.write "I m a "good" boy"<br>document.write "I m a \"good\" boy"
2
<strong>37. ¿Qué son las cookies de JavaScript?</strong>
Son archivos pequeños de prueba que se guardan en un ordenador y &nbsp;se crean cuando el usuario visita los sitios web para guardar información&nbsp; necesaria.
Opción 1
Opción 1
0
<strong>38. Explique el método pop()en JavaScript.</strong>
Opción 1
El método pop() es un método parecido al método shift(), con la diferencia de que el Shift funciona al comienzo del array. También, el método pop() aparta el último elemento del array dado y lo devuelve. Por ello, el array que llama es entonces alterado. <strong>Ejemplo:</strong>var ropa= ["Camisa", "Pantalón", "Franela"];<br>ropa.pop();<br>//Ahora ropa se convierte en camisa, pantalón.
Opción 1
1
<strong>39. Mencione cual es la desventaja de usar innerHTML en JavaScript.</strong>
Si se usa innerHTML en JavaScript la desventaja es:<br>-Se reemplaza el contenido en todas partes<br>-El contenido innerHTML es re-analizado y elaborado en elementos, lo que hace que sea mucho más lento.<br>-El innerHTML no suministra validación, por lo tanto, potencialmente se puede insertar HTML válido y no válido en el documento y dañarlo.
Opción 1
Opción 1
0
<strong>40. ¿Qué son las declaraciones break y continue?</strong>
Opción 1
La declaración Break sirve para salir del bucle actual. La declaracion continue sirve para continuar con la próxima sentencia del bucle.
Opción 1
1
<strong>41. ¿Cuáles son los dos grupos básicos de tipos de datos en JavaScript?</strong>
Opción 1
Opción 1
<strong>Primitivos:</strong> Son el número y &nbsp;tipos de datos booleanos.<br><strong>Tipos de referencia</strong>: son los tipos más complejos, como las string y las fechas. 
2
<strong>42. ¿Cómo se pueden crear objetos genéricos?</strong>
Opción 1
Opción 1
Los objetos genéricos se pueden crear como:<br>var myObjeto = new Object({ 'nombre': 'Diego', 'apeliido': 'Querales', 'edad': 25, }) <br> // Salida por consola<br> {nombre: "Diego", apeliido: "Querales", edad: 25}
2
<strong>43. ¿Para qué sirve el operador typeof?</strong>
Opción 1
Typeof': es un operador que se usa para regresar una descripción de cadena del tipo de una variable.
Opción 1
1
<strong>44. ¿Qué palabras clave se usan para manejar las excepciones?</strong>
Try, Catch y Finally son las que se utilizan para manejar excepciones en lenguaje JavaScript<br>Try{ <br>Code<br> } Catch(exp){<br>Código para lanzar una excepción <br> } <br> Finally <br> El código se ejecuta o bien termina con éxito después del catch. <br> }
Opción 1
Opción 1
0
<strong>45. ¿Qué palabra clave se utiliza para mostrar un texto en pantalla?</strong>
Opción 1
Opción 1
document.write ("Bienvenido") se usa para imprimir el texto - 'Bienvenido' en la pantalla.
2
<strong>46. ¿Para qué sirve el evento blur?</strong>
Opción 1
El evento blur es usado para desaparecer el enfoque del objeto especifico. <br> <strong>Código Javascript</strong><br> var myForm = document.getElementById("form"); <br> myForm.addEventListener("focus", function (event) { <br> event.target.style.background = "pink"; <br> }, true); <br> myForm.addEventListener("blur", function (event) { <br> event.target.style.background = ""; <br> }, true);<br> <strong>Código HTML</strong><br>&lt;form id="form"&gt;<br> &lt;input type="text" placeholder="text input"&gt; <br> &lt;input type="password" placeholder="password"&gt; <br> &lt;/form&gt;
Opción 1
1
<strong>47. ¿Qué es la tipificación de variables?</strong>
Opción 1
Opción 1
La tipificación de variables, sirve para asignar un número a una variable y después asignar un string a la misma variable. <strong>Ejemplo:</strong>i= 8; i="john";
2
<strong>48. ¿Cómo puedo saber la versión del navegador que está usando el cliente?</strong>
Mediante navigator.appVersion se puede conseguir la versión del navegador que está usando el cliente 
Opción 1
Opción 1
0
<strong>49. ¿Cuáles son los diferentes tipos de errores en JavaScript?</strong>
Opción 1
Opción 1
Se pueden encontrar tres tipos de errores: <strong>-Errores de tiempo de carga</strong>: Son los errores que se originan al cargar una página web, como son los errores de sintaxis inadecuados, los cuales se conocen como errores de tiempo de carga y producen los errores dinámicamente. <strong>-Errores de tiempo de ejecución</strong>: Son los errores producidos motivado al mal uso del comando dentro del lenguaje HTML. <strong>-Errores lógicos:</strong> Estos errores se producen debido a la mala lógica realizada en una función que tiene una operación distinta.
2
<strong>50. ¿Para qué sirve el método Push en JavaScript?</strong>
El método push es el utilizado para añadir o añadir uno o más elementos al final de un Array. Cuando se usa este método, se pueden añadir múltiples elementos pasando múltiples argumentos.
Opción 1
Opción 1
0
<strong>51. ¿Qué es el método unshift en JavaScript?</strong>
Opción 1
Unshift es un método parecido al método push, el cual funciona al comienzo del array. Este método es usado para anteponer uno o varios elementos al comienzo del array.
Opción 1
1
<strong>52. ¿Cuál es la diferencia entre JavaScript y Jscript?</strong>
Opción 1
Opción 1
Los dos son muy similares. JavaScript fue desarrollado por Netscape y Jscript fue desarrollado por Microsoft.
2
<strong>53.  </strong><strong>¿Cómo se asignan las propiedades a los objetos?</strong>
Las propiedades se asignadas a los objetos de la siguiente forma: obj["class"] = 12; <br> o también como: obj.class = 12;
Opción 1
Opción 1
0
<strong>54. ¿Qué es el modo 'Estricto' (Strict) en JavaScript y cómo se puede habilitar?</strong>
El modo estricto (strict) en JavaScript muestra los errores de un fragmento de código que anteriormente no mostraba ningún error. Pero que puede ser problemático e inseguro. En este modo también, se resuelven varios errores que dificultan la función eficiente de los motores de JavaScript. El modo estricto puede ser activado agregando la cadena "use strict" sobre el archivo. Esto se puede mostrar con el siguiente ejemplo:<br>function myfunction() {<br> "use strict"; <br> var v = "Esta es una función de modo estricto"; <br> }
Opción 1
Opción 1
0
<strong>55. ¿Cuál es la forma de obtener el estado de un CheckBox?</strong>
Opción 1
Opción 1
El status se puede adquirir de la siguiente forma.<br>alert(document.getElementById('checkbox1').checked);<br> Si la casilla de verificación está marcada, esta alerta devolverá 'True'.
2
<strong>56. Explique para que sirve window.onload y onDocumentReady.</strong>
Opción 1
El evento onload no se ejecuta hasta después que se cargue toda la información de la página. Esto produce un retraso sustancial antes de que se ejecute cualquier código. Por otro lado, el evento onDocumentReady permite cargar el código justo después de cargar el DOM. Esto permite manipular el código tempranamente. 
Opción 1
1
<strong> 57. ¿Cómo funcionan los 'closures'  en JavaScript? ¿Cuándo se utilizan?</strong>
El closure es una variable declarada localmente y que está relacionada con una función que sigue en memoria cuando la función ha regresado. <strong>Ejemplo:</strong> <br> function saludo(mensaje) { <br> console.log(mensaje); <br> } <br> function saludar(nombre, edad) { <br> return nombre +" dice Hola! tengo" + edad + " años"; <br> } <br> // Generar el mensaje <br> var mensaje= saludar("Rafael", 32); <br> // Explícitamente para saludar <br> saludo(mensaje); <br> Esta función se puede representar mejor usando cierres: <br> function saludar(nombre, edad) { <br> var mensaje= nombre + "dice Hola! tengo" + edad + " años"; <br> return function saludo() { <br> console.log(mensaje); <br> }; <br> } <br> // Generar el closure <br> var Rafael= saludar("Rafael", 32); <br> // Usa el cierre <br> Rafael(); 
Opción 1
Opción 1
0
<strong>58. ¿Cómo se puede añadir un valor a un array?</strong>
Opción 1
Un valor puede ser agregado a un array de la siguiente manera: arr[arr.length] = valor;
Opción 1
1
<strong>59. ¿Explica el bucle de for-in?</strong>
Opción 1
Opción 1
El bucle for-in, es usado para hacer un ciclo a través de las propiedades que tiene&nbsp; un objeto. La sintaxis del bucle for-in es: <br> for(nombre-de-la-variable in objeto){<br>bloque a ejecutar aqui<br>}<br> En cada repetición, una propiedad del objeto es asociada al nombre de la variable, y el bucle sigue hasta que se terminen todas&nbsp; las propiedades del objeto.
2
<strong>60. Describa las propiedades de una función anónima en JavaScript.</strong>
Opción 1
Una función anónima es la que se declara sin ningún identificador nombrado. Es decir, la función anónima es inaccesible después de su declaración.<br>Declaración de función anónima:<br>var anon = function() { <br> alert('Soy anónimo'); <br> };<br> anon(); <br> 
Opción 1
1
<strong>61. ¿Cuál es la diferencia entre .call() y .apply()?</strong>
Las funciones .call() y .apply() son &nbsp;similares en cuanto a su uso, pero tienen una pequeña diferencia. Esto se debe a que, .call() se utiliza cuando el programador conoce el número de argumentos de la función, porque se deben mencionar como argumentos en la sentencia/declaración de llamada. Por otra parte, .apply() se usa cuando no se conoce el número. Entonces, apply() espera que el argumento sea un array. Así pues, la diferencia básica entre ambas .call() y .apply(), está basada, en la forma en que pasan los argumentos a la función. Su uso se puede ilustrar con el siguiente ejemplo:<br> var unObjeto = { <br> miPropiedad : 'Foo', <br> miMetodo : function(prefijo, sufijo) { <br> alert(prefijo + this.miPropiedad +sufijo); <br> } <br> }; <br> unObjeto.miMetodo('&lt;', '&gt;'); // alerts &lt;Foo&gt;''. <br> var otroObjeto = { <br> miPropiedad : 'Bar' <br> }; <br> otroObjeto.miMetodo.call(otroObjeto, '&lt;', '&gt;'); // alerta '&lt;Bar&gt;'. <br> otroObjeto.miMetodo.apply(otroObjeto, ['&lt;', '&gt;']); // alerta '&lt;Bar&gt;'
Opción 1
Opción 1
0
<strong>62. Defina el burbujeo de eventos (Event Bubbling)</strong>
Opción 1
Opción 1
JavaScript permite que los elementos DOM estén anidados uno dentro del otro. Es decir, si se hace clic en el controlador del hijo (child handler), el controlador del parent (parent handler) va a funcionar como si también se hubiera hecho clic en el de él.
2
<strong>63. ¿Es JavaScript sensible a mayúsculas y minúsculas? </strong>
Opción 1
Sí, JavaScript diferencia entre las &nbsp;mayúsculas y las minúsculas. Un ejemplo es, una función parseInt, no es la misma que la función Parseint. 
Opción 1
1
<strong>64. ¿Qué operadores booleanos se pueden utilizar en JavaScript?</strong>
Pueden utilizarse el operador 'And' (&amp;&amp;), el operador'Or' (||) y el operador 'Not' (!). Los operadores no llevan los paréntesis.
Opción 1
Opción 1
0
<strong>65. ¿Cómo se puede seleccionar un frame en particular desde un hipervínculo en JavaScript?</strong>
Opción 1
Opción 1
Se puede hacer introduciendo el nombre del frame requerido en el hipervínculo y usando el atributo 'target'.<br>&lt;a href="/nueva.htm" target="newframe"&gt;&gt;Nueva Página &lt;/a&gt;
2
<strong>66. ¿Cuál es la regla de las  de las declaraciones break y continue?</strong>
La declaración Break se usa para salir del bucle actual, mientras que&nbsp; la sentencia continue continúa el bucle actual pero con nueva recurrencia.
Opción 1
Opción 1
0
<strong>67. ¿Cual es la diferencia entre un web-garden y una web-farm?</strong>
Opción 1
web-garden y web-farm son sistemas de alojamiento web. La única diferencia es que web-garden es una configuración que tiene muchos procesadores en un solo servidor, mientras que web-farm es una configuración más grande, por lo tanto, utiliza más de un servidor.
Opción 1
1
<strong>68. ¿Cómo se asignan las propiedades de los objetos?</strong>
Opción 1
Opción 1
La asignación de propiedades a objetos se hace de la misma forma que se asigna un valor a una variable. <strong>Ejemplo</strong>: document.form.action="submit" 
2
<strong>69. ¿Cuál es el método para leer y escribir un archivo en JavaScript?</strong>
Opción 1
Se puede hacer utilizando extensiones JavaScript (se ejecuta desde el editor JavaScript). <strong>Ejemplo</strong>, para abrir un archivo.<br>fh = fopen(getScriptPath(), 0);
Opción 1
1
<strong>70. ¿Cómo se utiliza DOM en JavaScript?</strong>
DOM (Modelo de objeto de documento) es responsable de la manera en que varios objetos de un documento interactúan entre sí. DOM es necesario para el desarrollo o creación de páginas web que poseen objetos como: enlaces, párrafos, entre otros. Estos objetos pueden ser operados para incluir acciones como agregar o eliminar. DOM, es necesario también para agregar capacidades adicionales a una página web. Asimismo, el uso de API proporciona una ventaja sobre otros modelos existentes.
Opción 1
Opción 1
0
<strong>71. ¿Cómo se utilizan los manejadores de eventos en JavaScript?</strong>
Los eventos son acciones que resultan de las actividades, como: hacer clic en un enlace o rellenar un formulario por parte del usuario. Es necesario un gestor de eventos para gestionar la ejecución de forma correcta de todos los eventos. El manejador de eventos son un atributo extra del objeto. Este atributo tiene el nombre del evento y la acción tomada, si el evento ocurre. 
Opción 1
Opción 1
0
<strong>72. Explique el papel de los scripts diferidos en JavaScript.</strong>
Opción 1
Por defecto, el análisis del código HTML, mientras se carga la página se pausa hasta que el script no se haya dejado de ejecutar. Es decir, si el servidor es lento o el script es pesado, la página web se muestra con un retraso. Si se usa un script diferido (Deferred), se retarda la ejecución del script hasta el momento en que se ejecuta el analizador de HTML. Esto disminuye el tiempo de carga de las páginas web y se muestran más rápido al usuario. 
Opción 1
1
<strong>73. ¿Cuáles son los distintos componentes funcionales de JavaScript?</strong>
Opción 1
Opción 1
Los distintos componentes funcionales de JavaScript son:<br><strong>Funciones de primera clase</strong>: Las funciones de JavaScript se usan como objetos de primera clase. Esto significa que las funciones, se pueden pasar como argumentos a otras funciones, devueltas como valores de otras funciones, asignadas a variables o&nbsp; pueden ser guardadas en estructuradas de datos.<br> <strong>Funciones anidadas</strong>: Son las funciones, que se definen dentro de otras funciones. Se llaman `cada vez que' se nombra la función principal. 
2
<strong>74. Comente sobre los errores que se pueden mostrar en JavaScript.</strong>
Opción 1
Opción 1
JavaScript emite un mensaje si se encuentra un error. Los errores reconocidos son:<br><strong>Errores en el tiempo de carga</strong>: Estos errores se encuentran al usar la sintaxis de forma incorrecta, y por tanto, se detectan mientras la página se está cargando. Por <strong>ejemplo</strong>: los errores en el momento de la carga de la página, se cuentan como errores de tiempo de carga<br><strong>Errores en tiempo de ejecución</strong>: Este error &nbsp;aparece mientras el programa está en ejecución. Es causado por operaciones como por&nbsp; <strong>ejemplo</strong>, división de un número por cero, o por intentar entrar a un área inexistente de la memoria.<br><strong>Errores de lógica:</strong> son causados por el uso de un código correcto sintácticamente pero que no cumple con la tarea requerida, <strong>ejemplo</strong>, un bucle infinito.
2
<strong> 75. </strong><strong>¿Qué son los objetos de pantalla?</strong>
Los objetos de pantalla sirven para leer la información de la pantalla del cliente. Sus propiedades&nbsp; son:<br>-AvailHeight: Da la altura de la pantalla del cliente<br>-AvailWidth: Da el ancho de la pantalla del cliente.<br>-ColorDepth: suministra la profundidad de bits de las imágenes en la pantalla del cliente<br>-Altura: Proporciona la altura general de la pantalla del cliente, incluye la barra de tareas.<br>-Ancho: muestra el ancho total de la pantalla del cliente, incluye la barra de tareas.
Opción 1
Opción 1
0
<strong>76. Explique el método unshift()</strong>
Opción 1
Opción 1
El método unshift(), es funcional al iniciar un array, a diferencia de push(). Este agrega el número deseado de elementos a la parte superior de un array. <strong>Ejemplo:</strong> <br>var nombre = [ "jose" ];<br> name.unshift ("eduardo"); <br> name.unshift ("pedro", "juana"); <br> console.log(nombre);<br> La salida se muestra a continuación:<br> [" pedro"," juana", " eduardo", " juan"] 
2
<strong>77. Defina las funciones escape() y unescape()</strong>
Opción 1
-La función <strong>escape()</strong> es la responsable de codificar un string para hacer el pase de información de un ordenador hacia el otro, a través de una red.<br><strong>Ejemplo:</strong><br>&lt;script&gt;<br>document.write(escape ("Hola? Como estas tu?"));<br>&lt;/script&gt; <br> Salida: Hola%3F%20Como%20estas%20tu%21 <br>-La función <strong>unescape()</strong> es&nbsp; importante&nbsp; porque es la que decodifica la cadena codificada.<br> <strong>Ejemplo:</strong><br>&lt;script&gt;<br>document.write(unescape("Hola%3F%20Como%20estas%20tu%21"));<br>&lt;/script&gt;&gt;<br>Salida: Hola? Como estas tu? 
Opción 1
1
<strong>78. ¿Qué hace decodeURI() y encodeURI()?</strong>
Opción 1
Opción 1
EncodeURl(): es utilizado para convertir URL a su codificación hexadecimal. &nbsp;DecodeURI() se utiliza para convertir la URL codificada de vuelta a normal.<br> &lt;script&gt; <br> var uri="my test.asp?name=ståle&amp;car=saab"; <br> document.write(encodeURI(uri)+ "&lt;br&gt;"); <br> document.write(decodeURI(uri)); <br> &lt;/script&gt;<br> Salida: my%20test.asp?name=st%C3%A5le&amp;car=saab <br>my test.asp?name=ståle&amp;car=saab 
2
<strong>79. ¿Por qué no se recomienda utilizar innerHTML en JavaScript?</strong>
Opción 1
No se recomienda su uso porque es muy lento dado que refresca el contenido cada vez. Es más fácil insertar un código errado en el documento y hacer que la página web sea inestable.
Opción 1
1
<strong>80. </strong><strong>¿Qué declara la siguiente declaración?</strong> var myArray = [[[]]]; 
Declara un array tridimensional.
Opción 1
Opción 1
0
<strong>81. ¿Cómo se relacionan JavaScript y ECMA Script?</strong>
Opción 1
Opción 1
ECMA Script son como reglas y directrices, mientras que Javascript es un lenguaje de scripting usado para el desarrollo web.
2
<strong>82. ¿Qué es el namespacing en JavaScript y cómo se utiliza?</strong>
Opción 1
Namespacing se utiliza para agrupar funciones, variables, etc con un nombre único.&nbsp; Esto mejora la modularidad en codificación y permite la reutilización del código.
Opción 1
1
<strong>83. ¿Cómo se pueden ocultar los códigos JavaScript de los navegadores antiguos que no soportan JavaScript?</strong>
Opción 1
Opción 1
Para ocultar códigos JavaScript de navegadores antiguos con este código:<br> Añada "&lt;!--" sin las comillas en el código justo después de la etiqueta &lt;script&gt;. <br> Añada "//--&gt;&gt;" sin las comillas en el código justo antes de la etiqueta &lt;script&gt;.<br> Ahora los navegadores antiguos verán este código JavaScript como un comentario HTML. Mientras que, un navegador que soporte JavaScript, tomará los "&lt;!--" y "//----&gt;" como comentarios de una línea.
2
ES NECESARIO DEJAR ESTA LÍNEA DENTRO DEL FICHERO